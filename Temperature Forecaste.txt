Temperature Forecaste


python code

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset
data = pd.read_csv("temperature_data.csv")

# Step 2: Preprocess the data
# Convert the "Date" column to a datetime object
data['Date'] = pd.to_datetime(data['Date'])
# Extract the day of the week, month, and year as features (you can add more features as needed)
data['Day'] = data['Date'].dt.day
data['Month'] = data['Date'].dt.month
data['Year'] = data['Date'].dt.year

# Step 3: Split the data into training and testing sets
X = data[['Day', 'Month', 'Year']]
y = data['Temperature']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 6: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Step 7: Make a future temperature forecast
# Suppose we want to predict the temperature for August 3, 2023 (unseen data)
future_date = pd.to_datetime('2023-08-03')
future_day = future_date.day
future_month = future_date.month
future_year = future_date.year

future_features = np.array([[future_day, future_month, future_year]])
future_temperature = model.predict(future_features)[0]

print("Temperature forecast for August 3, 2023:", future_temperature)

