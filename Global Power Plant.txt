GLOBAL POWER PLANT DATABASE PROJECT

 


 Step 1:
           Data Collection You can use libraries like requests and pandas to fetch and store data from a publicly available API or dataset. Below is a basic example using the Open Power System Data (OPSD) API to get information about power plants in Germany:      


import requests
import pandas as pd

# Replace API_URL with the actual API endpoint
API_URL = 'https://api.open-power-system-data.org/power_plants'

# Fetch data from the API
response = requests.get(API_URL)
data = response.json()

# Convert JSON data to a DataFrame
df_power_plants = pd.DataFrame(data['data'])
 


Step 2:
               Data Preprocessing Preprocessing involves cleaning and preparing the data for model training. Below are some basic preprocessing steps:
  

 # Handle missing values
df_power_plants = df_power_plants.dropna()

# Feature scaling/normalization
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df_power_plants[['capacity_mw', 'emissions_co2_per_gwh']] = scaler.fit_transform(df_power_plants[['capacity_mw', 'emissions_co2_per_gwh']])
 




 Step 3:
             Model Training For demonstration purposes, let's assume we are trying to predict power plant emissions (CO2 per GWh) using linear regression:


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Split the data into features and target
X = df_power_plants[['capacity_mw']]
y = df_power_plants['emissions_co2_per_gwh']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

